{
  "_args": [
    [
      "imagesloaded@git+https://github.com/eiriklv/imagesloaded.git",
      "/Users/kasperkuo/Desktop/Capstone Project/Capstone/node_modules/react-packery-component"
    ]
  ],
  "_from": "git+https://github.com/eiriklv/imagesloaded.git",
  "_id": "imagesloaded@3.1.8",
  "_inCache": true,
  "_installable": true,
  "_location": "/react-packery-component/imagesloaded",
  "_phantomChildren": {},
  "_requested": {
    "hosted": {
      "directUrl": "https://raw.githubusercontent.com/eiriklv/imagesloaded/master/package.json",
      "gitUrl": "git://github.com/eiriklv/imagesloaded.git",
      "httpsUrl": "git+https://github.com/eiriklv/imagesloaded.git",
      "shortcut": "github:eiriklv/imagesloaded",
      "ssh": "git@github.com:eiriklv/imagesloaded.git",
      "sshUrl": "git+ssh://git@github.com/eiriklv/imagesloaded.git",
      "type": "github"
    },
    "name": "imagesloaded",
    "raw": "imagesloaded@git+https://github.com/eiriklv/imagesloaded.git",
    "rawSpec": "git+https://github.com/eiriklv/imagesloaded.git",
    "scope": null,
    "spec": "git+https://github.com/eiriklv/imagesloaded.git",
    "type": "hosted"
  },
  "_requiredBy": [
    "/react-packery-component"
  ],
  "_resolved": "git+https://github.com/eiriklv/imagesloaded.git#04535a148206e58790927e133f24ca199163b995",
  "_shasum": "aa0d8b6555252fdf75cb21506f6d4f579ace9153",
  "_shrinkwrap": null,
  "_spec": "imagesloaded@git+https://github.com/eiriklv/imagesloaded.git",
  "_where": "/Users/kasperkuo/Desktop/Capstone Project/Capstone/node_modules/react-packery-component",
  "bugs": {
    "url": "https://github.com/desandro/imagesloaded/issues"
  },
  "dependencies": {
    "eventie": ">=1.0.4 <2",
    "wolfy87-eventemitter": "4.x"
  },
  "description": "You images done yet or what?",
  "devDependencies": {
    "grunt": "~0.4.0",
    "grunt-contrib-jshint": "~0.1.1",
    "grunt-contrib-uglify": "~0.1.2",
    "grunt-contrib-watch": "~0.3.1",
    "grunt-requirejs": "~0.4.0",
    "highlight.js": "~7.3.0",
    "marked": "~0.2.8"
  },
  "gitHead": "04535a148206e58790927e133f24ca199163b995",
  "homepage": "https://github.com/desandro/imagesloaded#readme",
  "keywords": [
    "images",
    "loaded",
    "ui"
  ],
  "license": "MIT",
  "main": "imagesloaded.js",
  "name": "imagesloaded",
  "optionalDependencies": {},
  "readme": "# imagesLoaded\n\n<p class=\"tagline\">JavaScript is all like \"You images done yet or what?\"</p>\n\n[imagesloaded.desandro.com](http://imagesloaded.desandro.com)\n\nDetect when images have been loaded.\n\n<!-- demo -->\n\n## Install\n\nGet a packaged source file:\n\n+ [imagesloaded.pkgd.min.js](http://imagesloaded.desandro.com/imagesloaded.pkgd.min.js)\n+ [imagesloaded.pkgd.js](http://imagesloaded.desandro.com/imagesloaded.pkgd.js)\n\nOr install via [Bower](http://bower.io): `bower install imagesloaded`\n\nOr install via npm: `npm install imagesloaded`\n\n## Usage\n\n``` js\nimagesLoaded( elem, callback )\n// you can use `new` if you like\nnew imagesLoaded( elem, callback )\n```\n\n+ `elem` _Element, NodeList, Array, or Selector String_\n+ `callback` _Function_ - function triggered after all images have been loaded\n\nUsing a callback function is the same as binding it to the `always` event (see below).\n\n``` js\n// element\nimagesLoaded( document.querySelector('#container'), function( instance ) {\n  console.log('all images are loaded');\n});\n// selector string\nimagesLoaded( '#container', function() {...});\n// multiple elements\nvar posts = document.querySelectorAll('.post');\nimagesLoaded( posts, function() {...});\n```\n\n\n## Events\n\nimagesLoaded is an Event Emitter. You can bind event listeners to events.\n\n``` js\nvar imgLoad = imagesLoaded( elem );\nfunction onAlways( instance ) {\n  console.log('all images are loaded');\n}\n// bind with .on()\nimgLoad.on( 'always', onAlways );\n// unbind with .off()\nimgLoad.off( 'always', onAlways );\n```\n\n### always\n\n``` js\nimgLoad.on( 'always', function( instance ) {\n  console.log('ALWAYS - all images have been loaded');\n});\n```\n\nTriggered after all images have been either loaded or confirmed broken.\n\n+ `instance` _imagesLoaded_ - the imagesLoaded instance\n\n### done\n\n``` js\nimgLoad.on( 'done', function( instance ) {\n  console.log('DONE  - all images have been successfully loaded');\n});\n```\n\nTriggered after all images have successfully loaded without any broken images.\n\n### fail\n\n``` js\nimgLoad.on( 'fail', function( instance ) {\n  console.log('FAIL - all images loaded, at least one is broken');\n});\n```\n\nTriggered after all images have been loaded with at least one broken image.\n\n### progress\n\n``` js\nimgLoad.on( 'progress', function( instance, image ) {\n  var result = image.isLoaded ? 'loaded' : 'broken';\n  console.log( 'image is ' + result + ' for ' + image.img.src );\n});\n```\n\nTriggered after each image has been loaded.\n\n+ `instance` _imagesLoaded_ - the imagesLoaded instance\n+ `image` _LoadingImage_ - the LoadingImage instance of the loaded image\n\n## Properties\n\n### LoadingImage.img\n\n_Image_ - The `img` element\n\n### LoadingImage.isLoaded\n\n_Boolean_ - `true` when the image has succesfully loaded\n\n### imagesLoaded.images\n\nArray of _LoadingImage_ instances for each image detected\n\n``` js\nvar imgLoad = imagesLoaded('#container');\nimgLoad.on( 'always', function() {\n  console.log( imgLoad.images.length + ' images loaded' );\n  // detect which image is broken\n  for ( var i = 0, len = imgLoad.images.length; i < len; i++ ) {\n    var image = imgLoad.images[i];\n    var result = image.isLoaded ? 'loaded' : 'broken';\n    console.log( 'image is ' + result + ' for ' + image.img.src );\n  }\n});\n```\n\n## jQuery\n\nIf you include jQuery, imagesLoaded can be used as a jQuery Plugin.\n\n``` js\n$('#container').imagesLoaded( function() {\n  // images have loaded\n});\n```\n\n### jQuery Deferred\n\nThe jQuery plugin returns a [jQuery Deferred object](http://api.jquery.com/category/deferred-object/). This allows you to use `.always()`, `.done()`, `.fail()` and `.progress()`, similarly to the emitted events.\n\n``` js\n$('#container').imagesLoaded()\n  .always( function( instance ) {\n    console.log('all images loaded');\n  })\n  .done( function( instance ) {\n    console.log('all images successfully loaded');\n  })\n  .fail( function() {\n    console.log('all images loaded, at least one is broken');\n  })\n  .progress( function( instance, image ) {\n    var result = image.isLoaded ? 'loaded' : 'broken';\n    console.log( 'image is ' + result + ' for ' + image.img.src );\n  });\n```\n\n## RequireJS\n\nimagesLoaded works with [RequireJS](http://requirejs.org).\n\nYou can require [imagesloaded.pkgd.js](http://imagesloaded.desandro.com/imagesloaded.pkgd.js).\n\n``` js\nrequirejs( [\n  'path/to/imagesloaded.pkgd.js',\n], function( imagesLoaded ) {\n  imagesLoaded( '#container', function() { ... });\n});\n```\n\nOr, you can manage dependencies with [Bower](http://bower.io). Set `baseUrl` to `bower_components` and set a path config for all your application code.\n\n``` js\nrequirejs.config({\n  baseUrl: 'bower_components/',\n  paths: { // path to your app\n    app: '../'\n  }\n});\n\nrequirejs( [\n  'imagesloaded/imagesloaded',\n  'app/my-component.js'\n], function( imagesLoaded, myComp ) {\n  imagesLoaded( '#container', function() { ... });\n});\n```\n\n## Contributors\n\nThis project has a [storied legacy](https://github.com/desandro/imagesloaded/graphs/contributors). Its current incarnation was developed by [Tomas Sardyha @Darsain](http://darsa.in/) and [David DeSandro @desandro](http://desandro.com).\n\n## MIT License\n\nimagesLoaded is released under the [MIT License](http://desandro.mit-license.org/). Have at it.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/desandro/imagesloaded.git"
  },
  "version": "3.1.8"
}
